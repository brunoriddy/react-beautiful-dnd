import ReactDOMServer from 'react-dom/server';
import gzip from 'gzip-js';
import { bytesToKiloBytes } from '../../util/convert-bytes-to';
import { timedTask, staticTask } from './create';
const renderToString = timedTask({
    name: 'Render to string',
    description: `This task records how long a ReactDOM.renderToString() call takes`,
    run: async ({ getElement }) => {
        ReactDOMServer.renderToString(getElement());
    },
});
const renderToStaticMarkup = timedTask({
    name: 'Render to static markup (cannot be hydrated)',
    description: `
    This task records how long a ReactDOM.renderToStaticMarkup() call takes.
    This output cannot be hydrated on the client
  `,
    run: async ({ getElement }) => {
        ReactDOMServer.renderToStaticMarkup(getElement());
    },
});
const getRawStringSizeInKB = staticTask({
    name: 'String output size',
    description: `
    The size of the string generated by ReactDOM.renderToString().
  `,
    scale: 'kb',
    run: async ({ getElement }) => {
        const output = ReactDOMServer.renderToString(getElement());
        const blob = new Blob([output]);
        return String(bytesToKiloBytes(blob.size));
    },
});
const getGzipStringSizeInKB = staticTask({
    name: 'String output size (gzip)',
    description: `
    The gzipped size of the string generated by ReactDOM.renderToString().
  `,
    scale: 'kb',
    run: async ({ getElement }) => {
        const output = ReactDOMServer.renderToString(getElement());
        const bytes = gzip.zip(output, { level: 9 }).length;
        return String(bytesToKiloBytes(bytes));
    },
});
const getRawStaticMarkupSizeInKB = staticTask({
    name: 'Static markup output size',
    description: `
    The size of the string generated by ReactDOM.renderToStaticMarkup().
  `,
    scale: 'kb',
    run: async ({ getElement }) => {
        const output = ReactDOMServer.renderToStaticMarkup(getElement());
        const blob = new Blob([output]);
        return String(bytesToKiloBytes(blob.size));
    },
});
const getGzipStaticMarkupSizeInKB = staticTask({
    name: 'Static markup output size (gzip)',
    description: `
    The gzipped size of the string generated by ReactDOM.renderToStaticMarkup().
  `,
    scale: 'kb',
    run: async ({ getElement }) => {
        const output = ReactDOMServer.renderToStaticMarkup(getElement());
        const bytes = gzip.zip(output, { level: 9 }).length;
        return String(bytesToKiloBytes(bytes));
    },
});
const group = {
    groupId: 'Server',
    name: 'Server ☁️',
    tasks: [
        renderToString,
        renderToStaticMarkup,
        getRawStringSizeInKB,
        getGzipStringSizeInKB,
        getRawStaticMarkupSizeInKB,
        getGzipStaticMarkupSizeInKB,
    ],
};
export default group;
