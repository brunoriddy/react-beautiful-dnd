import { Button, Form, Icons } from '@storybook/components';
import { styled } from '@storybook/theming';
import React from 'react';
import useRequiredContext from '../use-required-context';
import ServiceContext from './service-context';
import { useService } from '@xstate/react';
import { pluraliseCopies, pluraliseSamples } from '../util/pluralise';
import nextEventsInclude from './next-events-include';
import * as selectors from '../selectors';
const Container = styled.div `
  display: flex;
  align-items: center;
  flex-wrap: wrap;
`;
const Message = styled.small `
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  flex-shrink: 1;
  flex-grow: 1;
`;
const Segment = styled.div `
  display: flex;
  align-items: center;

  > * {
    margin: var(--halfGrid) !important;
    flex-shrink: 0;
  }
`;
const CollapseSegment = styled(Segment) `
  width: 500px;
  min-width: 0;
`;
export default function Topbar() {
    const service = useRequiredContext(ServiceContext);
    const [state, send] = useService(service);
    const current = state.context.current;
    const pinned = state.context.pinned;
    const sizes = state.context.sizes;
    const enabled = {
        start: nextEventsInclude('START_ALL', state.nextEvents),
        change: nextEventsInclude('SET_VALUES', state.nextEvents) && pinned == null,
        pin: nextEventsInclude('PIN', state.nextEvents) && current.results != null,
        unpin: nextEventsInclude('UNPIN', state.nextEvents) && current.results != null,
    };
    return (React.createElement(Container, null,
        React.createElement(Segment, null,
            React.createElement(Button, { primary: true, small: true, onClick: () => send({ type: 'START_ALL' }), disabled: !enabled.start, id: selectors.startAllButtonId }, "START ALL"),
            React.createElement(Form.Select, { id: selectors.copySelectId, disabled: !enabled.change, value: current.copies, onChange: (event) => {
                    const values = {
                        samples: current.samples,
                        copies: Number(event.target.value),
                    };
                    send('SET_VALUES', values);
                } }, sizes.map((size) => (React.createElement("option", { key: size, value: size },
                size,
                " ",
                pluraliseCopies(size))))),
            React.createElement(Form.Select, { id: selectors.sampleSelectId, disabled: !enabled.change, value: current.samples, onChange: (event) => {
                    const values = {
                        copies: current.copies,
                        samples: Number(event.target.value),
                    };
                    send('SET_VALUES', values);
                } },
                ">",
                sizes.map((size) => (React.createElement("option", { key: size, value: size },
                    size,
                    " ",
                    pluraliseSamples(size)))))),
        React.createElement(CollapseSegment, null,
            React.createElement(Button, { id: selectors.pinButtonId, secondary: true, small: true, outline: true, disabled: pinned ? !enabled.unpin : !enabled.pin, onClick: () => send({ type: pinned ? 'UNPIN' : 'PIN' }) },
                React.createElement(Icons, { icon: pinned ? 'unlock' : 'lock' }),
                pinned ? 'Unpin baseline result' : 'Pin result as baseline'),
            React.createElement(Message, null, state.context.message))));
}
