import { styled } from '@storybook/theming';
import React, { useMemo } from 'react';
import { getInteractionGroup } from '../tasks/get-interaction-group';
import preset from '../tasks/preset';
import machine from './machine';
import ServiceContext from './service-context';
import TaskGroupPanel from './task-group';
import Topbar from './top-bar';
import usePanelMachine from './use-panel-machine';
import { panelId } from '../selectors';
const Container = styled.div `
  --grid: 10px;
  --halfGrid: calc(var(--grid) / 2);

  font-size: 16px;
  line-height: 1.5;
`;
const GroupContainer = styled.div `
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  min-height: 100%;
  padding: 0 var(--halfGrid);
`;
function findResult(group, context) {
    if (!context || !context.results) {
        return null;
    }
    const result = context.results.find((item) => item.groupId === group.groupId);
    return result || null;
}
function getResult(group, context) {
    const result = findResult(group, context);
    if (!result) {
        throw new Error(`Could not find group(${group.groupId}) in result`);
    }
    return result;
}
export default function Panel({ channel, interactions, }) {
    const { state, service } = usePanelMachine(machine, channel);
    const groups = useMemo(function merge() {
        return [...preset, getInteractionGroup(interactions)];
    }, [interactions]);
    return (React.createElement(ServiceContext.Provider, { value: service },
        React.createElement(Container, { id: panelId },
            React.createElement(Topbar, null),
            React.createElement(GroupContainer, null, groups.map((group) => {
                if (state.context.current.results == null) {
                    return null;
                }
                return (React.createElement(TaskGroupPanel, { key: group.groupId, group: group, result: getResult(group, state.context.current), pinned: findResult(group, state.context.pinned) }));
            })))));
}
