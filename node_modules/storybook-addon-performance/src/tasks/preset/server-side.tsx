import ReactDOMServer from 'react-dom/server';
import gzip from 'gzip-js';
import { StaticTask, TimedTask, TaskGroup, RunStaticTaskArgs, RunTimedTaskArgs } from '../../types';
import { bytesToKiloBytes } from '../../util/convert-bytes-to';
import { timedTask, staticTask } from './create';

const renderToString: TimedTask = timedTask({
  name: 'Render to string',
  description: `This task records how long a ReactDOM.renderToString() call takes`,
  run: async ({ getElement }: RunTimedTaskArgs): Promise<void> => {
    ReactDOMServer.renderToString(getElement());
  },
});

const renderToStaticMarkup: TimedTask = timedTask({
  name: 'Render to static markup (cannot be hydrated)',
  description: `
    This task records how long a ReactDOM.renderToStaticMarkup() call takes.
    This output cannot be hydrated on the client
  `,
  run: async ({ getElement }: RunTimedTaskArgs): Promise<void> => {
    ReactDOMServer.renderToStaticMarkup(getElement());
  },
});

const getRawStringSizeInKB: StaticTask = staticTask({
  name: 'String output size',
  description: `
    The size of the string generated by ReactDOM.renderToString().
  `,
  scale: 'kb',
  run: async ({ getElement }: RunStaticTaskArgs): Promise<string> => {
    const output: string = ReactDOMServer.renderToString(getElement());
    const blob: Blob = new Blob([output]);
    return String(bytesToKiloBytes(blob.size));
  },
});

const getGzipStringSizeInKB: StaticTask = staticTask({
  name: 'String output size (gzip)',
  description: `
    The gzipped size of the string generated by ReactDOM.renderToString().
  `,
  scale: 'kb',
  run: async ({ getElement }: RunStaticTaskArgs): Promise<string> => {
    const output: string = ReactDOMServer.renderToString(getElement());
    // Using max level of compression.
    // This is what Jira currently uses
    const bytes: number = gzip.zip(output, { level: 9 }).length;

    return String(bytesToKiloBytes(bytes));
  },
});

const getRawStaticMarkupSizeInKB: StaticTask = staticTask({
  name: 'Static markup output size',
  description: `
    The size of the string generated by ReactDOM.renderToStaticMarkup().
  `,
  scale: 'kb',
  run: async ({ getElement }: RunStaticTaskArgs): Promise<string> => {
    const output: string = ReactDOMServer.renderToStaticMarkup(getElement());
    const blob: Blob = new Blob([output]);
    return String(bytesToKiloBytes(blob.size));
  },
});

const getGzipStaticMarkupSizeInKB: StaticTask = staticTask({
  name: 'Static markup output size (gzip)',
  description: `
    The gzipped size of the string generated by ReactDOM.renderToStaticMarkup().
  `,
  scale: 'kb',
  run: async ({ getElement }: RunStaticTaskArgs): Promise<string> => {
    const output: string = ReactDOMServer.renderToStaticMarkup(getElement());
    // Using max level of compression.
    // This is what Jira currently uses
    const bytes: number = gzip.zip(output, { level: 9 }).length;

    return String(bytesToKiloBytes(bytes));
  },
});

const group: TaskGroup = {
  groupId: 'Server',
  name: 'Server ☁️',
  tasks: [
    renderToString,
    renderToStaticMarkup,
    getRawStringSizeInKB,
    getGzipStringSizeInKB,
    getRawStaticMarkupSizeInKB,
    getGzipStaticMarkupSizeInKB,
  ],
};

export default group;
